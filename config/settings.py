"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/

"""
from datetime import timedelta
from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret

# SECURITY WARNING: don't run with debug turned on in production!

SECRET_KEY = os.getenv("SECRET_KEY")
DEBUG = os.getenv("DEBUG", "False") == "True"
# In production set DJANGO_PRODUCTION=1 and provide ALLOWED_HOSTS via env var
DJANGO_PRODUCTION = os.getenv('DJANGO_PRODUCTION', '0') == '1'
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")

# Security defaults for production
if DJANGO_PRODUCTION:
    # Ensure DEBUG is False in production
    DEBUG = False
    # Use secure cookies and redirect to HTTPS
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    # HSTS - set to 1 year (adjust carefully)
    SECURE_HSTS_SECONDS = int(os.getenv('SECURE_HSTS_SECONDS', 31536000))
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

# Secret key guidance: ensure a long random secret in production
if not SECRET_KEY or len(SECRET_KEY) < 50:
    # In development this may be unset; in production ensure you set a secure SECRET_KEY
    if DJANGO_PRODUCTION:
        raise RuntimeError('SECRET_KEY must be set to a long, random value in production')




# Application definition

INSTALLED_APPS = [
    "jazzmin",  # <- add this line
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',
    'drf_spectacular',
    'django.contrib.sitemaps',
    # Local Apps
    'apps.casino',
    'apps.commissions',
    'apps.riskengine',
    'apps.fraud_aml',
    'apps.reconciliation',
    'apps.realtime',
    'apps.reports',
    'apps.cms',
    'apps.dashboard',
    'apps.jobs',
    'apps.audit',
    'apps.adminpanel',
    'apps.wallets',
    'apps.bets',
    'apps.agents',
    'apps.payments',
    'apps.sports',
    'apps.notifications',  # Notification system
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Local Apps
    'apps.users',
]

# Sports API Configuration
SPORTS_API_KEY = os.getenv('SPORTS_API_KEY')
SPORTS_API_BASE_URL = os.getenv('SPORTS_API_BASE_URL')

# Jazzmin Admin Theme Settings
JAZZMIN_SETTINGS = {
    # title of the window
    "site_title": "BetLab Admin",
    # Title on the brand, and the login screen (19 chars max)
    "site_header": "BetLab Dashboard",
    "site_brand": "BETLAB",
    # square logo to use for your site, must be present in static files
    "site_logo": None,
    # Welcome text on the login screen
    "welcome_sign": "Welcome to BetLab Admin",
    # Copyright on the footer
    "copyright": "VelkiList Ltd",
    # The model admin to search from the search bar
    "search_model": "users.User",
    # Field name on user model that contains avatar image
    "user_avatar": None,

    #############
    # Side Menu #
    #############
    # Whether to display the side menu
    "show_sidebar": True,
    # Collapse sidebar groups by default; click to expand (as requested)
    "navigation_expanded": False,

    # Custom icons for side menu apps/models
    "icons": {
        # Core
        "users": "fas fa-users",
        "users.user": "fas fa-user",
        "users.Role": "fas fa-user-tag",
        # Sportsbook
        "sports": "fas fa-trophy",
        "sports.Category": "fas fa-trophy",
        "sports.League": "fas fa-flag",
        "sports.Team": "fas fa-shield-alt",
        "sports.Game": "fas fa-futbol",
        "sports.Market": "fas fa-chart-line",
        "sports.Selection": "fas fa-check-circle",
        # Betting & Wallet/Finance
        "bets": "fas fa-ticket-alt",
        "bets.Bet": "fas fa-ticket-alt",
        "wallets": "fas fa-wallet",
        "wallets.Wallet": "fas fa-wallet",
        "wallets.Transaction": "fas fa-exchange-alt",
        "payments": "fas fa-money-bill",
        "payments.PaymentIntent": "fas fa-money-bill",
        "payments.WithdrawalRequest": "fas fa-money-check-alt",
    # Payments filtered proxies
    "payments.PaymentIntentPending": "fas fa-hourglass-half",
    "payments.PaymentIntentCompleted": "fas fa-check-circle",
    "payments.PaymentIntentFailed": "fas fa-times-circle",
    "payments.WithdrawalRequestPending": "fas fa-hourglass-half",
    "payments.WithdrawalRequestApproved": "fas fa-check-circle",
    "payments.WithdrawalRequestRejected": "fas fa-times-circle",
        # Compliance
        "riskengine": "fas fa-shield-alt",
        "fraud_aml": "fas fa-user-secret",
        "reconciliation": "fas fa-balance-scale",
        # Business
        "agents": "fas fa-user-tie",
        "commissions": "fas fa-percentage",
        # Ops & comms
        "notifications": "fas fa-bell",
        "reports": "fas fa-chart-pie",
        "cms": "fas fa-cogs",
        "jobs": "fas fa-tasks",
        "audit": "fas fa-clipboard-list",
        # Notifications (specific models)
        "notifications.SMSTemplate": "fas fa-sms",
        "notifications.EmailTemplate": "fas fa-envelope",
        "notifications.NotificationLog": "fas fa-paper-plane",
        "notifications.InAppNotification": "fas fa-bell",
    },

    # Side menu grouped similar to BetLab sections
    "side_menu": [
        {"label": "Dashboard", "icon": "fas fa-chart-line", "url": "/admin/"},

        {"label": "Manage Bettors", "icon": "fas fa-users"},
        {"app": "users"},
        {"app": "agents"},

        {"label": "Betting", "icon": "fas fa-ticket-alt"},
        {"app": "bets"},

        {"label": "Sports", "icon": "fas fa-trophy"},
        {"app": "sports"},

    {"label": "Manage Finance", "icon": "fas fa-money-bill"},
    {"app": "payments"},
    {"app": "wallets"},

        {"label": "Casino", "icon": "fas fa-dice"},
        {"app": "casino"},

        {"label": "Compliance", "icon": "fas fa-shield-alt"},
        {"app": "riskengine"},
        {"app": "fraud_aml"},
        {"app": "reconciliation"},

        {"label": "Operations", "icon": "fas fa-cogs"},
        {"app": "notifications"},
        {"app": "jobs"},
        {"app": "realtime"},
        {"app": "audit"},

        {"label": "Reports", "icon": "fas fa-chart-pie"},
        {"app": "reports"},

        {"label": "CMS", "icon": "fas fa-cogs"},
        {"app": "cms"},

        

        {"label": "System Settings", "icon": "fas fa-sliders-h", "url": "/admin/system/settings/"},
    ],

    # Icons that are used when one is not manually specified
    "default_icon_parents": "fas fa-chevron-circle-right",
    "default_icon_children": "fas fa-circle",

    #################
    # Related Modal #
    #################
    # Whether to show the plus/edit/delete links on the related modal
    "related_modal_active": True,

    #############
    # UI Tweaks #
    #############
    # Whether to show the UI customizer on the sidebar
    "show_ui_builder": True,

    ###############
    # Change view #
    ###############
    # Render out the change view as a single form, or in tabs
    "changeform_format": "horizontal_tabs",
    # override change forms on a per modeladmin basis
    "changeform_format_overrides": {
        "users.user": "collapsible",
        "sports.game": "horizontal_tabs",
    },

    "custom_css": "dashboard/css/custom.css",
    "custom_js": "dashboard/js/custom.js",
    # Explicit ordering for apps/models in the sidebar
    "order_with_respect_to": [
        # Payments app dropdown ordering
        "payments",
        "payments.WithdrawalRequestApproved",
        "payments.PaymentIntentCompleted",
        "payments.PaymentIntentFailed",
        "payments.PaymentIntent",
        "payments.PaymentProvider",
        "payments.PaymentIntentPending",
        "payments.WithdrawalRequestPending",
        "payments.ReconciliationBatch",
        "payments.ReconciliationItem",
        "payments.ReconciliationReport",
        "payments.WithdrawalRequestRejected",
        "payments.WithdrawalRequest",
        # Notifications app dropdown ordering
        "notifications",
        "notifications.SMSTemplate",
        "notifications.EmailTemplate",
        "notifications.InAppNotification",
        "notifications.NotificationLog",
    ],
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': os.getenv('DRF_THROTTLE_ANON', '100/day'),
        'user': os.getenv('DRF_THROTTLE_USER', '1000/day'),
    },
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "AUTH_HEADER_TYPES": ("Bearer",),
}

# Celery / Redis
REDIS_URL = os.getenv('REDIS_URL', 'redis://redis:6379/0')
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', REDIS_URL)
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', REDIS_URL)
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_BEAT_SCHEDULE = {
    'sports-games-every-2h': {
        'task': 'apps.sports.tasks.fetch_sports_games_task',
        'schedule': 60 * 60 * 2,
    },
    'sports-odds-every-10m': {
        'task': 'apps.sports.tasks.fetch_sports_odds_task',
        'schedule': 60 * 10,
    },
    'sports-live-every-1m': {
        'task': 'apps.sports.tasks.fetch_sports_live_task',
        'schedule': 60,
    },
    'agent-commissions-daily': {
        'task': 'apps.commissions.tasks.generate_agent_commissions_task',
        'schedule': 60 * 60 * 24,
    },
    'risk-monitor-hourly': {
        'task': 'apps.riskengine.tasks.risk_monitor_task',
        'schedule': 60 * 60,
    },
    'backup-daily': {
        'task': 'apps.jobs.tasks.backup_task',
        'schedule': 60 * 60 * 24,
    },
}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'config.middleware_security.IPBlockMiddleware',
    'config.middleware_security.CountryRestrictionMiddleware',
    'config.middleware_security.MaintenanceModeMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'config.middleware_audit.AdminAuditMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'apps', 'adminpanel', 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en'

TIME_ZONE = 'Asia/Dhaka'

USE_I18N = True

USE_TZ = True

# Multi-language support
LANGUAGES = [
    ('en', 'English'),
    ('bn', 'Bengali'),
]
LOCALE_PATHS = [os.path.join(BASE_DIR, 'locale')]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Static files settings
STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'config/static')]  

# Media files settings
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'config/media')  

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'users.User'

# (duplicate Celery config removed; see definitions above)

# CORS
CORS_ALLOWED_ORIGINS = [o for o in os.getenv('CORS_ALLOWED_ORIGINS', '').split(',') if o]
CORS_ALLOW_CREDENTIALS = True

# drf-spectacular
SPECTACULAR_SETTINGS = {
    'TITLE': 'VelkiList API',
    'DESCRIPTION': 'Betting platform API',
    'VERSION': '1.0.0',
}

# Currency configuration (BDT-first, extensible)
SUPPORTED_CURRENCIES = [c for c in os.getenv('SUPPORTED_CURRENCIES', 'BDT,USD,EUR').split(',') if c]
DEFAULT_CURRENCY = os.getenv('DEFAULT_CURRENCY', 'BDT')

# Risk defaults (cents)
RISK_MAX_STAKE_PER_BET_CENTS = int(os.getenv('RISK_MAX_STAKE_PER_BET_CENTS', '1000000'))  # 10,000.00
RISK_MAX_DAILY_STAKE_CENTS = int(os.getenv('RISK_MAX_DAILY_STAKE_CENTS', '5000000'))      # 50,000.00

# Provider toggles (documented here for clarity; used by adapters)
CASINO_USE_DEMO = os.getenv('CASINO_USE_DEMO', '1') == '1'
SPORTS_USE_DEMO = os.getenv('SPORTS_USE_DEMO', '1') == '1'
